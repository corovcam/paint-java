package com.corovcak.martin.java.paint;

import javax.swing.*;
import java.awt.*;
import com.intellij.uiDesigner.core.*;

/**
 * GUI JFrame that contains all the buttons, panels and interactive components
 */
public class PaintAppGUI extends JFrame {
    private JPanel mainPanel;
    private JPanel drawPanel;
    private JPanel colorPanel;
    private JButton newFileButton;
    private JButton saveButton;
    private JButton openButton;
    private JButton undoButton;
    private JButton redoButton;
    private JButton clearButton;
    private JToggleButton penButton;
    private JToggleButton lineButton;
    private JToggleButton rectangleButton;
    private JToggleButton circleButton;
    private JToggleButton ellipseButton;
    private JToggleButton polygonButton;
    private JToggleButton textButton;
    private JToggleButton eraserButton;
    private JButton pickColorButton;
    private JButton pickFontButton;
    private JSpinner lineWidthSpinner;
    private ButtonGroup buttonGroup;

    private final IOHandler ioHandler;

    public PaintAppGUI() {
        ioHandler = new IOHandler(this);
        ToolbarListener toolbarListener = new ToolbarListener(this);

        // Buttons with just clickable function
        $$$setupUI$$$(); // GUIDesigner auto-generated code
        JButton[] buttons = new JButton[]{
                newFileButton, saveButton, openButton, undoButton,
                redoButton, clearButton, pickColorButton, pickFontButton
        };
        // Toggle buttons that stay looking "pressed" after click
        JToggleButton[] toggleButtons = new JToggleButton[]{
                penButton, lineButton, rectangleButton, circleButton,
                ellipseButton, polygonButton, textButton, eraserButton
        };
        // Pen is always clicked from the start
        penButton.doClick();
        // Add custom button listener
        for (var btn : buttons)
            btn.addActionListener(toolbarListener);
        for (var btn : toggleButtons) {
            btn.addActionListener(toolbarListener);
            buttonGroup.add(btn); // Add to Toggle ButtonGroup
        }
        lineWidthSpinner.addChangeListener(toolbarListener);
    }

    /**
     * Custom components definition (not supported by GUI Designer).
     * The IDE will call this function when it needs to create the UI components.
     */
    private void createUIComponents() {
        drawPanel = new Canvas(this);
        lineWidthSpinner = new JSpinner(new SpinnerNumberModel(1, 1, Integer.MAX_VALUE, 1));
        buttonGroup = new ButtonGroup();
    }

    public final JPanel getMainPanel() {
        return mainPanel;
    }

    // Component Getters (we don't need to expose Component setters to other Classes)
    public AbstractButton getPenButton() {
        return penButton;
    }

    public AbstractButton getLineButton() {
        return lineButton;
    }

    public AbstractButton getCircleButton() {
        return circleButton;
    }

    public AbstractButton getEllipseButton() {
        return ellipseButton;
    }

    public AbstractButton getPolygonButton() {
        return polygonButton;
    }

    public AbstractButton getRectangleButton() {
        return rectangleButton;
    }

    public AbstractButton getTextButton() {
        return textButton;
    }

    public AbstractButton getEraserButton() {
        return eraserButton;
    }

    public JButton getClearButton() {
        return clearButton;
    }

    public JButton getUndoButton() {
        return undoButton;
    }

    public JButton getRedoButton() {
        return redoButton;
    }

    public JButton getSaveButton() {
        return saveButton;
    }

    public JButton getPickColorButton() {
        return pickColorButton;
    }

    public JButton getPickFontButton() {
        return pickFontButton;
    }

    public JPanel getColorPanel() {
        return colorPanel;
    }

    public JButton getNewFileButton() {
        return newFileButton;
    }

    public JButton getOpenButton() {
        return openButton;
    }

    public JSpinner getLineWidthSpinner() {
        return lineWidthSpinner;
    }

    /**
     * This function returns a Canvas object that is the same as the drawPanel object.
     *
     * @return The Canvas object.
     */
    public Canvas getCanvas() {
        return (Canvas) drawPanel;
    }

    public IOHandler getIoHandler() {
        return ioHandler;
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        createUIComponents();
        mainPanel = new JPanel();
        mainPanel.setLayout(new GridLayoutManager(17, 10, new Insets(10, 10, 10, 10), -1, -1));
        lineButton = new JToggleButton();
        lineButton.setText("Line");
        mainPanel.add(lineButton, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        rectangleButton = new JToggleButton();
        rectangleButton.setText("Rectangle");
        mainPanel.add(rectangleButton, new GridConstraints(3, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        circleButton = new JToggleButton();
        circleButton.setText("Circle");
        mainPanel.add(circleButton, new GridConstraints(4, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        ellipseButton = new JToggleButton();
        ellipseButton.setText("Ellipse");
        mainPanel.add(ellipseButton, new GridConstraints(5, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        polygonButton = new JToggleButton();
        polygonButton.setText("Polygon");
        mainPanel.add(polygonButton, new GridConstraints(6, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        textButton = new JToggleButton();
        textButton.setText("Text");
        mainPanel.add(textButton, new GridConstraints(7, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        eraserButton = new JToggleButton();
        eraserButton.setText("Eraser");
        mainPanel.add(eraserButton, new GridConstraints(8, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        pickColorButton = new JButton();
        pickColorButton.setText("Pick Color");
        mainPanel.add(pickColorButton, new GridConstraints(10, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final Spacer spacer1 = new Spacer();
        mainPanel.add(spacer1, new GridConstraints(0, 9, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
        drawPanel.setBackground(new Color(-1));
        mainPanel.add(drawPanel, new GridConstraints(1, 1, 16, 9, GridConstraints.ANCHOR_NORTHWEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(700, 500), null, 0, false));
        penButton = new JToggleButton();
        penButton.setText("Pen");
        mainPanel.add(penButton, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final Spacer spacer2 = new Spacer();
        mainPanel.add(spacer2, new GridConstraints(16, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1, GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        colorPanel = new JPanel();
        colorPanel.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        colorPanel.setBackground(new Color(-16777216));
        colorPanel.setForeground(new Color(-16777216));
        mainPanel.add(colorPanel, new GridConstraints(11, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(30, 30), null, 0, false));
        clearButton = new JButton();
        clearButton.setText("Clear");
        mainPanel.add(clearButton, new GridConstraints(0, 8, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        redoButton = new JButton();
        redoButton.setText("Redo");
        mainPanel.add(redoButton, new GridConstraints(0, 6, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        undoButton = new JButton();
        undoButton.setText("Undo");
        mainPanel.add(undoButton, new GridConstraints(0, 5, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        saveButton = new JButton();
        saveButton.setText("Save");
        mainPanel.add(saveButton, new GridConstraints(0, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        newFileButton = new JButton();
        newFileButton.setText("New");
        mainPanel.add(newFileButton, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        openButton = new JButton();
        openButton.setText("Open");
        mainPanel.add(openButton, new GridConstraints(0, 3, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final Spacer spacer3 = new Spacer();
        mainPanel.add(spacer3, new GridConstraints(9, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, 1, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(-1, 20), null, 0, false));
        final Spacer spacer4 = new Spacer();
        mainPanel.add(spacer4, new GridConstraints(0, 4, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, 1, null, new Dimension(20, -1), null, 0, false));
        final Spacer spacer5 = new Spacer();
        mainPanel.add(spacer5, new GridConstraints(0, 7, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, 1, null, new Dimension(20, -1), null, 0, false));
        lineWidthSpinner.setToolTipText("Line Width");
        mainPanel.add(lineWidthSpinner, new GridConstraints(15, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JLabel label1 = new JLabel();
        label1.setText("Line Width");
        mainPanel.add(label1, new GridConstraints(14, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final Spacer spacer6 = new Spacer();
        mainPanel.add(spacer6, new GridConstraints(13, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, 1, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(-1, 20), null, 0, false));
        pickFontButton = new JButton();
        pickFontButton.setText("Pick Font");
        mainPanel.add(pickFontButton, new GridConstraints(12, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        label1.setLabelFor(lineWidthSpinner);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return mainPanel;
    }

}
